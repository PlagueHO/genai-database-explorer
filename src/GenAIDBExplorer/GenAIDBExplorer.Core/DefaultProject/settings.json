{
    "SettingsVersion": "1.0.0", // Internal schema version of this settings file
    "Database": {
        "Name": "AdventureWorksLT", // Display name of the database/project used across outputs
        "Description": "Product, sales, and customer data for the AdventureWorks company.", // This helps ground the AI on the context of the database.
        "ConnectionString": "Server=.;Database=AdventureWorksLT;Trusted_Connection=True;MultipleActiveResultSets=True;", // SQL Server connection string used to extract schema
        "AuthenticationType": "SqlAuthentication", // Authentication type: "SqlAuthentication" (default) or "EntraIdAuthentication" (for managed identity/Entra ID)
        "Schema": "dbo", // If omitted will get all schemas.
        "MaxDegreeOfParallelism": 10, // Number of parallel SQL tasks to run.
        "NotUsedTables": [ // Array of regex's to set NotUsed flag on tables in the database
            "^.*\\.MSchange_tracking_history$"
        ],
        "NotUsedColumns": [ // Array of regex's to set NotUsed flag on columns in the database
            ".*_old$"
        ],
        "NotUsedViews": [], // Array of regex's to set NotUsed flag on views in the database
        "NotUsedStoredProcedures": [] // Array of regex's to set NotUsed flag on stored procedures in the database
    },
    "DataDictionary": {
        // Settings to control the data dictionary import processes.
        "ColumnTypeMapping": [
            { "From": "VARCHAR", "To": "NVARCHAR" },
            { "From": "CHAR", "To": "NCHAR" }
        ] // Array of mappings to convert column types during data dictionary import.
    },
    "SemanticModel": {
        "PersistenceStrategy": "LocalDisk", // LocalDisk, AzureBlob, CosmosDB
        "MaxDegreeOfParallelism": 10 // Number of parallel semantic model tasks to run.
    },
    "SemanticModelRepository": {
        // Configuration for LocalDisk persistence strategy
        "LocalDisk": {
            "Directory": "semantic-model" // Directory path for storing semantic model files
        },
        // Configuration for Azure Blob persistence strategy
        "AzureBlob": {
            "AccountEndpoint": "https://<Set your Azure Storage account endpoint>.blob.core.windows.net", // Azure Storage account endpoint URL
            "ContainerName": "semantic-models", // Blob container name to store semantic models
            "BlobPrefix": "", // Optional prefix for organizing models
            "OperationTimeoutSeconds": 300, // Per-operation timeout for blob operations (seconds)
            "MaxConcurrentOperations": 4, // Max parallel blob operations
            "UseCustomerManagedKeys": false, // Enable CMK encryption for blobs
            "CustomerManagedKeyUrl": "" // Required if UseCustomerManagedKeys is true
        },
        // Configuration for Azure Cosmos DB persistence strategy
        "CosmosDb": {
            "AccountEndpoint": "https://<Set your Azure Cosmos DB account endpoint>.documents.azure.com:443/", // Cosmos DB account endpoint URL
            "DatabaseName": "SemanticModels", // Cosmos database name to hold model and entity containers
            "ModelsContainerName": "Models", // Container for semantic model metadata
            "EntitiesContainerName": "ModelEntities", // Container for per-entity documents
            "ModelsPartitionKeyPath": "/modelName", // Partition key path for models container
            "EntitiesPartitionKeyPath": "/modelName", // Partition key path for entities container
            "DatabaseThroughput": 400, // RU/s - Set to null for serverless
            "OperationTimeoutSeconds": 300, // Per-operation timeout for Cosmos requests (seconds)
            "MaxConcurrentOperations": 4, // Max parallel Cosmos operations
            "MaxRetryAttempts": 3, // Transient failure retry attempts
            "ConsistencyLevel": "Session" // Eventual, ConsistentPrefix, Session, BoundedStaleness, Strong
        },
        // Performance and behavior configuration
        "LazyLoading": {
            "Enabled": true // Enable lazy loading for entity collections (tables, views, stored procedures)
        },
        "Caching": {
            "Enabled": true, // Enable in-memory caching of loaded semantic models
            "ExpirationMinutes": 30 // Cache expiration time in minutes (1-1440)
        },
        "ChangeTracking": {
            "Enabled": true // Enable change tracking for selective persistence
        },
        "PerformanceMonitoring": {
            "Enabled": true, // Enable performance monitoring for repository operations
            "DetailedTiming": false, // Collect detailed timing information
            "MetricsEnabled": true // Enable metrics collection
        },
        "MaxConcurrentOperations": 10 // Maximum number of concurrent repository operations (1-50)
    },
    "OpenAIService": {
        "Default": {
            "ServiceType": "AzureOpenAI", // AzureOpenAI, OpenAI
            "AzureAuthenticationType": "EntraIdAuthentication", // Authentication method for Azure OpenAI: "EntraIdAuthentication" (default, uses managed identity/DefaultAzureCredential) or "ApiKey" (traditional API key)
            // "OpenAIKey": "<Set your OpenAI API key>"
            "AzureOpenAIKey": "<Set your Azure OpenAI API key>", // Azure OpenAI key. Only required when AzureAuthenticationType is "ApiKey". When using "EntraIdAuthentication", this can be omitted
            "AzureOpenAIEndpoint": "https://<Set your Azure OpenAI endpoint>.cognitiveservices.azure.com/" // Azure OpenAI endpoint
            // "TenantId": "<AzureTenantId>" // Optional: Azure tenant ID for DefaultAzureCredential. Use when resource is in different tenant than default
            // "AzureOpenAIAppId": "" // Azure OpenAI App Id
        },
        "ChatCompletion": {
            // "ModelId": "gpt-4.1-mini-2025-04-14", // Only required when using OpenAI. Recommend gpt-4.1-2025-04-14 or gpt-4.1-mini-2025-04-14 (or above)
            "AzureOpenAIDeploymentId": "<Set your Azure OpenAI deployment id>" // Only required when using Azure OpenAI. Recommend gpt-4o or gpt-4o-mini
        },
        // Required for structured chat completion to reliably extract entity lists. Must be a model that supports structured output.
        "ChatCompletionStructured": {
            // "ModelId": "gpt-4.1-mini-2025-04-14", // Only required when using OpenAI. Recommend gpt-4.1-2025-04-14 or gpt-4.1-mini-2025-04-14 (or above)
            "AzureOpenAIDeploymentId": "<Set your Azure OpenAI deployment id>" // Only required when using Azure OpenAI. Recommend gpt-4o (2024-08-06 or later)
        },
        "Embedding": {
            // "ModelId": "gpt-4o-mini-2024-07-18", // Only required when using OpenAI. Recommend gpt-4o-2024-08-06 or gpt-4o-mini-2024-07-18
            "AzureOpenAIDeploymentId": "<Set your Azure OpenAI deployment id>" // Only required when using Azure OpenAI. Used for vector embeddings generation (recommend text-embedding-3-large/small or ada-002)
        }
    },
    "VectorIndex": {
        "Provider": "Auto", // Index provider selection: Auto, AzureAISearch, CosmosDB, InMemory
        "CollectionName": "genaide-entities", // Logical index/collection name for vectors
        "PushOnGenerate": true, // Upsert vectors into the index immediately after generation
        "ProvisionIfMissing": false, // Attempt to create the index/collection if it does not exist
        "EmbeddingServiceId": "Embeddings", // The registered SK embeddings service name to use
        "ExpectedDimensions": 3072, // Expected embedding vector size (validates against model/index)
        "AllowedForRepository": ["LocalDisk", "AzureBlob", "CosmosDB"], // Allowed persistence strategies for indexing integration
        "AzureAISearch": {
                "Endpoint": "https://<Set your Azure AI Search endpoint>.search.windows.net", // Azure AI Search endpoint URL
                "IndexName": "<Set your Azure AI Search index name>", // AI Search index name to store vectors
                "ApiKey": "<Set your Azure AI Search API key>" // Admin/Query API key (use managed identity in production when possible)
        },
        "CosmosDB": {
                // When using the CosmosDB repository strategy, vectors are stored on the SAME entity documents
                // in the Entities container. Configure only vector specifics here.
                "VectorPath": "/embedding/vector",          // JSON path on the entity document holding the vector
                "DistanceFunction": "cosine",               // cosine | dotproduct | euclidean
                "IndexType": "diskANN"                      // diskANN | quantizedFlat | flat
        },
        "Hybrid": {
            "Enabled": false
        }
    }
}