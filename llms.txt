# Generative AI Database Explorer

> A .NET 9 application that uses Generative AI to help users explore and query relational databases by generating detailed semantic models and enabling natural language database interactions.

This project generates semantic models from database schemas, enriches them with AI-powered insights, and provides both CLI and planned web interfaces for database exploration through natural language queries.

## Documentation

- [Main README](README.md): Primary project documentation with overview, components, and getting started information
- [Quick Start Guide](docs/QUICKSTART.md): Step-by-step guide for installing, configuring, and using the GenAI Database Explorer
- [Installation Guide](docs/INSTALLATION.md): Detailed installation instructions and requirements
- [CLI Tool Documentation](docs/cli/README.md): Complete documentation for the gaidbexp console application commands and usage
- [Semantic Model Storage](docs/technical/SEMANTIC_MODEL_STORAGE.md): Documentation on semantic model persistence and storage strategies
- [Project Structure](docs/technical/SEMANTIC_MODEL_PROJECT_STRUCTURE.md): Documentation on project folder structure and organization patterns
- [Semantic Model Component Documentation](docs/components/semantic-model-documentation.md): Technical documentation for the semantic model domain objects and architecture
- [Project Model Component Documentation](docs/components/project-model-documentation.md): Technical documentation for project configuration and settings management
- [AI Agent Instructions](.github/copilot-instructions.md): Comprehensive development guidelines and coding standards for AI agents working with this codebase

## Specifications

- [Console CLI Interface Specification](spec/spec-app-console-cli-interface.md): Complete specification for CLI commands, parameters, validation, and expected behavior
- [Natural Language Query Provider Specification](spec/spec-data-natural-language-query-provider.md): Specification for AI-powered natural language to SQL query generation using Semantic Kernel and ReAct patterns
- [Semantic Model Repository Specification](spec/spec-data-semantic-model-repository.md): Technical specification for the repository pattern implementation supporting Local Disk, Azure Blob, and Cosmos DB persistence
- [Infrastructure Deployment Specification](spec/spec-infrastructure-deployment-bicep-avm.md): Azure infrastructure deployment specifications using Bicep and Azure Verified Modules
- [.NET Aspire Integration Specification](spec/spec-infrastructure-dotnet-aspire-integration.md): Specification for integrating .NET Aspire for enhanced observability and telemetry
- [Project Structure Specification](spec/spec-project-structure-genai-database-explorer.md): Comprehensive specification defining the project structure, organization patterns, and conventions
- [Azure Application Insights Integration Specification](spec/spec-monitoring-azure-application-insights-opentelemetry.md): Specification for monitoring and observability using Azure Application Insights and OpenTelemetry
- [Continuous Delivery Process Specification](spec/spec-process-cicd-continuous-delivery.md): Specification for CI/CD processes, deployment pipelines, and release management

## Implementation Plans

- [Semantic Model Repository Updates Plan](plan/plan-data-semantic-model-repository-updates.md): Comprehensive implementation plan for repository pattern with lazy loading, change tracking, and multi-storage support
- [System.CommandLine Beta5 Upgrade Plan](plan/plan-upgrade-system-commandline-beta5.md): Plan for upgrading the CLI framework to System.CommandLine Beta5
- [.NET Aspire Integration Plan](plan/plan-infrastructure-aspire-integration-1.md): Plan for integrating .NET Aspire support to provide enhanced observability and telemetry

## Configuration

- [Azure Deployment Configuration](azure.yaml): Azure Developer CLI configuration for cloud deployment
- [Infrastructure Templates](infra/main.bicep): Bicep templates for Azure infrastructure provisioning
- [Azure OpenAI Models Configuration](infra/azure-openai-models.json): Configuration for Azure OpenAI service models and capabilities
- [Project Settings Template](samples/AdventureWorksLT/settings.json): Example project configuration for the AdventureWorksLT sample database

## Examples

- [AdventureWorksLT Sample](samples/AdventureWorksLT/): Complete sample project demonstrating semantic model extraction and enrichment with the AdventureWorksLT database
- [Data Dictionary Preprocessing](utils/prepare-data-dictionary.ipynb): Jupyter notebook for preparing and processing data dictionary files

## Source Code

- [Console Application](src/GenAIDBExplorer/GenAIDBExplorer.Console/): Command-line interface providing init-project, extract-model, enrich-model, and query-model commands
- [Core Library](src/GenAIDBExplorer/GenAIDBExplorer.Core/): Domain logic, semantic providers, data dictionary processing, and repository patterns
- [Unit Tests](src/GenAIDBExplorer/Tests/Unit/): Comprehensive test suite using MSTest, FluentAssertions, and Moq

## Optional

- [GitVersion Configuration](GitVersion.yml): Semantic versioning configuration for automated release management
- [Development Container](.devcontainer/): Docker development environment configuration with setup and validation scripts
- [VS Code Settings](.vscode/): Visual Studio Code workspace configuration, debugging settings, and task definitions
- [License](LICENSE): MIT license terms and conditions
