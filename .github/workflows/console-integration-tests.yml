name: Console App Integration Tests

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        description: "The environment to use for integration testing"
        required: true
        type: string
      RESOURCE_GROUP_NAME:
        description: "The Azure resource group name containing the SQL Server"
        required: true
        type: string
      SQL_SERVER_NAME:
        description: "The SQL Server name for database connection"
        required: true
        type: string
      AZURE_AI_FOUNDRY_ENDPOINT:
        description: "The Azure AI Foundry endpoint for AI operations"
        required: false
        type: string
      AZURE_AI_FOUNDRY_NAME:
        description: "The Azure AI Foundry resource name for endpoint construction"
        required: false
        type: string

    secrets:
      SQL_SERVER_USERNAME:
        description: "The SQL Server username for the application"
        required: true
      SQL_SERVER_PASSWORD:
        description: "The SQL Server password for the application"
        required: true
      AZURE_CLIENT_ID:
        description: "Azure service principal client ID for authentication"
        required: true
      AZURE_TENANT_ID:
        description: "Azure tenant ID for authentication"
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: "Azure subscription ID for resource access"
        required: true

jobs:
  console-app-integration-tests:
    name: Console App Integration Tests (${{ matrix.persistence }})
    strategy:
      fail-fast: false
      matrix:
        persistence: [LocalDisk, AzureBlob, CosmosDb]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Download Console App Artifact
        uses: actions/download-artifact@v5
        with:
          name: console-app-published
          path: ./publish

      - name: Make Console App Executable
        run: chmod +x ./publish/GenAIDBExplorer.Console

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Discover and Configure Azure Storage (for AzureBlob)
        if: matrix.persistence == 'AzureBlob'
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Import-Module ./.github/WorkflowTools/WorkflowTools.psd1 -Force
            Set-AzureStorageForTests -ResourceGroupName "${{ inputs.RESOURCE_GROUP_NAME }}" -Environment "${{ inputs.ENVIRONMENT }}" -RunId "${{ github.run_id }}"

      - name: Discover and Configure Azure Cosmos DB (for CosmosDb)
        if: matrix.persistence == 'CosmosDb'
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Import-Module ./.github/WorkflowTools/WorkflowTools.psd1 -Force
            Set-CosmosDbForTests -ResourceGroupName "${{ inputs.RESOURCE_GROUP_NAME }}"

      - name: Add SQL Server Firewall Rule
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Import-Module ./.github/WorkflowTools/WorkflowTools.psd1 -Force
            $fwName = "GitHubRunner-${{ github.run_id }}-${{ matrix.persistence }}"
            Add-SqlServerFirewallRule -ResourceGroupName "${{ inputs.RESOURCE_GROUP_NAME }}" -SqlServerName "${{ inputs.SQL_SERVER_NAME }}" -FirewallRuleName $fwName

      - name: Get Azure OpenAI API Key
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Import-Module ./.github/WorkflowTools/WorkflowTools.psd1 -Force
            Get-AIFoundryApiKey -ResourceGroupName "${{ inputs.RESOURCE_GROUP_NAME }}" -AIFoundryName "${{ inputs.AZURE_AI_FOUNDRY_NAME }}" -SqlServerName "${{ inputs.SQL_SERVER_NAME }}"

      - name: "Run Console Integration Tests (${{ matrix.persistence }})"
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            # Debug environment variables for diagnostic purposes
            Write-Host "=== Environment Variables Debug ===" -ForegroundColor Magenta
            Write-Host "SQL_CONNECTION_STRING: $($env:SQL_CONNECTION_STRING.Length) characters" -ForegroundColor Yellow
            Write-Host "AZURE_OPENAI_ENDPOINT: '$env:AZURE_OPENAI_ENDPOINT'" -ForegroundColor Yellow
            Write-Host "AZURE_OPENAI_API_KEY: $($env:AZURE_OPENAI_API_KEY.Length) characters (masked)" -ForegroundColor Yellow
            Write-Host "Input AZURE_AI_FOUNDRY_ENDPOINT: '${{ inputs.AZURE_AI_FOUNDRY_ENDPOINT }}'" -ForegroundColor Yellow
            Write-Host "Input AZURE_AI_FOUNDRY_NAME: '${{ inputs.AZURE_AI_FOUNDRY_NAME }}'" -ForegroundColor Yellow
            Write-Host "Persistence strategy: '$env:PERSISTENCE_STRATEGY'" -ForegroundColor Yellow
            if ($env:PERSISTENCE_STRATEGY -eq 'AzureBlob') {
              Write-Host "Blob endpoint: $env:AZURE_STORAGE_ACCOUNT_ENDPOINT, container: $env:AZURE_STORAGE_CONTAINER, prefix: $env:AZURE_STORAGE_BLOB_PREFIX" -ForegroundColor Yellow
            }
            if ($env:PERSISTENCE_STRATEGY -match 'CosmosDb') {
              Write-Host "Cosmos DB endpoint: $env:AZURE_COSMOS_DB_ACCOUNT_ENDPOINT, db: $env:AZURE_COSMOS_DB_DATABASE_NAME, models: $env:AZURE_COSMOS_DB_MODELS_CONTAINER, entities: $env:AZURE_COSMOS_DB_ENTITIES_CONTAINER" -ForegroundColor Yellow
            }

            # Construct OpenAI endpoint if not provided but name is available
            if ([string]::IsNullOrEmpty($env:AZURE_OPENAI_ENDPOINT) -and -not [string]::IsNullOrEmpty('${{ inputs.AZURE_AI_FOUNDRY_NAME }}')) {
              $constructedEndpoint = "https://${{ inputs.AZURE_AI_FOUNDRY_NAME }}.cognitiveservices.azure.com/"
              Write-Host "Constructing OpenAI endpoint from AI Foundry name: $constructedEndpoint" -ForegroundColor Cyan
              $env:AZURE_OPENAI_ENDPOINT = $constructedEndpoint
            }

            # If we still don't have an endpoint and we know the SQL server name, try to construct from that pattern
            if ([string]::IsNullOrEmpty($env:AZURE_OPENAI_ENDPOINT) -and -not [string]::IsNullOrEmpty('${{ inputs.SQL_SERVER_NAME }}')) {
              # Extract the environment suffix from SQL server name (e.g., sql-gaidbexp-16461932142 -> gaidbexp-16461932142)
              $sqlServerName = '${{ inputs.SQL_SERVER_NAME }}'
              if ($sqlServerName -match '^sql-(.+)$') {
                $envSuffix = $matches[1]
                $constructedEndpoint = "https://$envSuffix.cognitiveservices.azure.com/"
                Write-Host "Constructing OpenAI endpoint from SQL server pattern: $constructedEndpoint" -ForegroundColor Yellow
                $env:AZURE_OPENAI_ENDPOINT = $constructedEndpoint
              }
            }

            # Check if endpoint and API key are available for AI tests
            if ([string]::IsNullOrEmpty($env:AZURE_OPENAI_ENDPOINT) -or [string]::IsNullOrEmpty($env:AZURE_OPENAI_API_KEY)) {
              Write-Warning "Azure AI Foundry endpoint or API key not available. AI-related integration tests will be skipped or may fail gracefully."
              Write-Host "This is expected behavior when AI services are not deployed or configured." -ForegroundColor Yellow
              Write-Host "To enable AI tests, ensure AZURE_AI_FOUNDRY_ENDPOINT is passed correctly from infrastructure provisioning." -ForegroundColor Yellow
              Write-Host "Check the 'Get Output Endpoints' step in provision-infrastructure workflow for Azure CLI endpoint retrieval." -ForegroundColor Yellow
              if ([string]::IsNullOrEmpty($env:AZURE_OPENAI_API_KEY)) {
                Write-Host "API key was not retrieved - check that the AI Foundry service exists and has the expected naming pattern." -ForegroundColor Yellow
              }
            } else {
              Write-Host "Azure AI services configured with endpoint and API key. AI integration tests will run." -ForegroundColor Green
              Write-Host "Endpoint format: $($env:AZURE_OPENAI_ENDPOINT)" -ForegroundColor Cyan

              # Validate endpoint format
              if ($env:AZURE_OPENAI_ENDPOINT -match 'https://.*\.cognitiveservices\.azure\.com/?$') {
                Write-Host "✅ Valid Azure Cognitive Services endpoint format detected" -ForegroundColor Green
                Write-Host "   This endpoint supports OpenAI API calls at /openai/* paths" -ForegroundColor Green
              } elseif ($env:AZURE_OPENAI_ENDPOINT -match 'https://.*\.openai\.azure\.com/?$') {
                Write-Host "✅ Valid Azure OpenAI endpoint format detected" -ForegroundColor Green
              } else {
                Write-Warning "⚠️  Unexpected endpoint format - tests may still work but verify configuration"
                Write-Host "   Expected: https://<name>.cognitiveservices.azure.com/ or https://<name>.openai.azure.com/" -ForegroundColor Yellow
              }
            }
            Write-Host "===================================" -ForegroundColor Magenta

            # Run integration tests using extracted PowerShell script
            Write-Host "Starting console integration tests..." -ForegroundColor Green
            Write-Host "SQL Server: ${{ inputs.SQL_SERVER_NAME }}" -ForegroundColor Yellow
            Write-Host "Azure AI Foundry Endpoint: ${{ inputs.AZURE_AI_FOUNDRY_ENDPOINT }}" -ForegroundColor Yellow
            
            Import-Module ./.github/WorkflowTools/WorkflowTools.psd1 -Force
            Invoke-IntegrationTests -TestResultsPath './test-results' -TestScriptPath './src/Tests/Integration/Console.Integration.Tests.ps1'
        env:
          SQL_CONNECTION_STRING: "Server=${{ inputs.SQL_SERVER_NAME }}.database.windows.net;Database=AdventureWorksLT;User Id=${{ secrets.SQL_SERVER_USERNAME }};Password=${{ secrets.SQL_SERVER_PASSWORD }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
          AZURE_OPENAI_ENDPOINT: ${{ inputs.AZURE_AI_FOUNDRY_ENDPOINT || env.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_API_KEY: ${{ env.AZURE_OPENAI_API_KEY }}
          CONSOLE_APP_PATH: ./publish/GenAIDBExplorer.Console
          PERSISTENCE_STRATEGY: ${{ matrix.persistence }}
          # Optional envs for strategies
          AZURE_STORAGE_ACCOUNT_ENDPOINT: ${{ env.AZURE_STORAGE_ACCOUNT_ENDPOINT }}
          AZURE_STORAGE_CONTAINER: ${{ env.AZURE_STORAGE_CONTAINER }}
          AZURE_STORAGE_BLOB_PREFIX: ${{ env.AZURE_STORAGE_BLOB_PREFIX }}
          AZURE_COSMOS_DB_ACCOUNT_ENDPOINT: ${{ env.AZURE_COSMOS_DB_ACCOUNT_ENDPOINT }}
          AZURE_COSMOS_DB_DATABASE_NAME: ${{ env.AZURE_COSMOS_DB_DATABASE_NAME }}
          AZURE_COSMOS_DB_MODELS_CONTAINER: ${{ env.AZURE_COSMOS_DB_MODELS_CONTAINER }}
          AZURE_COSMOS_DB_ENTITIES_CONTAINER: ${{ env.AZURE_COSMOS_DB_ENTITIES_CONTAINER }}

      - name: Check Integration Test Results File
        id: check-test-results
        if: always()
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
            Import-Module ./.github/WorkflowTools/WorkflowTools.psd1 -Force
            Test-IntegrationTestResults -TestResultsPath './test-results/integration-tests.xml' -OutputVariable 'test-results-valid' -ShowPreview

      - name: Publish Integration Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && steps.check-test-results.outputs.test-results-valid == 'true'
        with:
          check_name: Console Integration Test Results
          files: './test-results/integration-tests.xml'
          comment_title: Console Integration Test Results

      - name: Upload Integration Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: console-integration-test-results-${{ matrix.persistence }}
          path: |
            ./test-results/
            ./temp-workspaces/
          retention-days: 7
